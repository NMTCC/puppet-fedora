#!/bin/bash

version="0.24"
host=`hostname`
user=`whoami`
grouptcc=`id -G | sed -e 's/ /\n/g' | grep '^26$'`
filetype=$1
editor=$2
entries=$3
ok="no"

function template {
	echo "# Enter your selections below." > /tmp/cdconfig.$user
	echo "# Format:  camera.date(YYYYMMDD).starthour(HH).endhour(HH)" >> /tmp/cdconfig.$user
	echo "# Examples:   speare16-cam.20050401.8.17  (8:00 through 17:59)" >> /tmp/cdconfig.$user
	echo "#            jonesa101-cam.20050401.0.23  (a whole day)" >> /tmp/cdconfig.$user
	echo "#          workman101-cam.20050401.12.12  (one hour only)" >> /tmp/cdconfig.$user
	echo "###############################################################" >> /tmp/cdconfig.$user
}

if [ "$grouptcc" != "26" ]; then
	echo $user" is not in group tcc!"
	exit
fi

clear
echo "jpgmpg version $version"

while [ "$filetype" != "iso" ] && [ "$filetype" != "mpg" ]
do
	echo "How should I store the files?"
	echo -n "I can make an ISO, or just give you the MPEGs. (iso,mpg)$ "
	read filetype
done

while [ "$editor" != "vi" ] && [ "$editor" != "emacs" ]
do
	echo -n "Which editor should I run? (vi,emacs)$ "
	read editor
done


if [ "$entries" == "" ]; then
	template
	$editor /tmp/cdconfig.$user
	entries=`cat /tmp/cdconfig.$user | grep -v "#"`
fi
if [ "$entries" == "" ]; then
	clear
	echo "No logs requested. Exiting."
	exit
fi

while [ 1 ]
do
	clear
	echo "Checking for requested logs..."
	sleep 1
	ok="yes"
	cameras=`echo $entries | awk 'BEGIN { FS = "." } ; { print $1 }'`
	for cam in $cameras
	do
		test=`ls -1 /sf/cameras | grep $cam`
		if [ "$test" == "" ]; then
			echo "Unknown camera in entry: $cam"
			ok="no"
		fi
	done
	dates=`echo $entries | awk 'BEGIN { FS = "." } ; { print $2 }'`
	head=`ls -1 /sf/cameras/speare16-cam | grep 2 | head -n 1`
	tail=`ls -1 /sf/cameras/speare16-cam | grep 2 | tail -n 1`
	for date in $dates
	do
		if [ "$date" -lt "$head" ] || [ "$date" -gt "$tail" ]; then
			echo "Nonarchived date in entry: $date"
			ok="no"
		fi
	done
	hours=""
	for entry in $entries
	do
		hours=$hours" "`echo $entry | awk 'BEGIN { FS = "." } ; { print $3"."$4 }'`
	done
	for hour in $hours
	do
		hour1=`echo $hour | awk 'BEGIN { FS = "." } ; { print $1 }'`
		hour2=`echo $hour | awk 'BEGIN { FS = "." } ; { print $2 }'`
		if [ "$hour1" -lt "0" ] || [ "$hour2" -gt "23" ] || [ "$hour2" -lt "$hour1" ]; then
			echo "Incorrect hours in entry: $hour"
			ok="no"
		fi
	done
	if [ "$ok" == "yes" ]; then
		break
	fi
	sleep 5
	echo "Going back to $editor..."
	sleep 1
	$editor /tmp/cdconfig.$user
	entries=`cat /tmp/cdconfig.$user | grep -v "#"`
done

echo "All requested entries are in the logs."
mkdir -p /tmp/cd.$user
hourlist="00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23"
for line in $entries
do
	camera=`echo $line | awk 'BEGIN { FS = "." } ; { print $1 }'`
	day=`echo $line | awk 'BEGIN { FS = "." } ; { print $2 }'`
	begin=`echo $line | awk 'BEGIN { FS = "." } ; { print $3 }'`
	end=`echo $line | awk 'BEGIN { FS = "." } ; { print $4 }'`
	for hour in $hourlist
	do
		if [ "$hour" -ge "$begin" ] && [ "$hour" -le "$end" ]; then
			if [ "`echo $camera | grep speare`" != "" ]; then
				cd /sf/cameras/$camera/$day/
			else
				cd /sf/cameras/$camera/$day/
			fi
			echo "Converting $camera.$day.$hour..."
			for jpg in `ls *_2*_$hour*.jpg`
			do
				convert $jpg /tmp/cd.$user/$jpg.ppm
			done
			ls /tmp/cd.$user/*.ppm > /tmp/ppmlist.$user
			echo "Encoding $camera.$day.$hour..."
			sort /tmp/ppmlist.$user | xargs -n1 cat | ppmtoy4m -S 420mpeg2 | mpeg2enc -v 0 -o /tmp/cd.$user/$camera.$day.$hour.mpg
			rm -f /tmp/cd.$user/*.ppm
		fi
	done
done

if [ "$filetype" == "mpg" ]; then
	mkdir -p ~/mpegs_$user
	mv -f /tmp/cd.$user/*.mpg ~/mpegs_$user/
	rm -rf /tmp/cd.$user
	rm -rf /tmp/cdconfig.$user
	rm -rf /tmp/ppmlist.$user
	echo ""
	echo "Done. Your MPEG files are in ~/mpegs_$user"
	exit 0
fi

echo "Creating ISO 9660 file system..."
sleep 1
mkisofs -R -o /tmp/$user.iso /tmp/cd.$user
mv -f /tmp/$user.iso ~/mpegs_$user.iso
echo ""
echo "Done. Your ISO is ~/mpegs_$user.iso"

rm -rf /tmp/cd.$user
rm -rf /tmp/$user.iso
rm -rf /tmp/cdconfig.$user
rm -rf /tmp/ppmlist.$user
